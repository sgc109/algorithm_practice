#include <bits/stdc++.h>
using namespace std;
const int MOD = 1e9+7;
const int INF = 0x3c3c3c3c;
const long long INFL = 0x3c3c3c3c3c3c3c3c;

class ParenthesisRemoval {
    public:
    int countWays(string s);
};

map<long long, long long> dp;

long long hashing(string s){
    long long ret = 0;
    for(int i = 0 ; i < s.size(); i++){
        if(s[i] == '(') ret++;
        ret = (ret * 2) % 1000000000000000007;
    }
    return ret;
}

long long go(string s){
    if(s.size()==2) return 1;
    long long h = hashing(s);
    auto it = dp.find(h);
    if(it != dp.end()) return dp[h];

    string next;
    int st = 0;
    int i;
    for(i = 0 ; i < s.size(); i++){
        if(s[i] == '(') st++;
        else st--;
        if(!st) break;
    }
    int pos = i;

    long long ret = 0;
    for(int i = 1; i <= pos; i++){
        if(s[i] == '(') continue;
        string next;
        for(int j = 1; j < s.size(); j++) if(i!=j) next += s[j];
        ret = (ret + go(next)) % MOD;
    }

    return dp[h] = ret;
}

int ParenthesisRemoval::countWays(string s){
    return (int)go(s);
}

int main(){

    ParenthesisRemoval obj;
    cout << obj.countWays

    return 0;
}