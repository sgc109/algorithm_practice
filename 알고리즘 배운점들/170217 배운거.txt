BOJ의 블럭쌓기(https://www.acmicpc.net/problem/14278) 를 풀며 배운점

dp 문제를 풀때 부분문제의 정의와 점화식이 나왔는데 각각의 부분문제를 구하는 식의 구현이 복잡하거나시간이 오래걸리는(혹은 둘다의)경우가 있다.
예를 들어 여러가지 조합(Combination) 을 따져줘야할경우가 그렇다. 이럴경우 가장 간편한 방법중 하나가 트리dp 에서 현재 노드의 위치 뿐만아니라 몇번째
자식까지 처리해 주었는지를 저장하는 변수 하나를 부분문제에(재귀로 구현한다면 재귀 함수의 인자에) 추가하여 한,두 차원을 늘리는것처럼 부분 문제를
세분화하는 방법이다. 하지만 이렇게 할 경우 시간 복잡도가 기준 이상으로 커지거나 dp 배열의 공간복잡도가 기준 이상으로 커지는 경우가 있는 듯 하다.
이럴 경우에는 그냥 부분 문제를 그대로 두고 직접 여러가지 조합들을 계산을 할 수 밖에 없다. (물론 이렇게 했을 때에는 시간복잡도가 기준을 넘지않는다면)
그러나, 그 계산 하는 부분을 또 다른 재귀 함수를 정의하여 완전탐색(백트래킹)으로 구현하면 되고 그 재귀 함수 내에서 끝(기저)에 도달했다면
그 재귀 함수에서 dp 함수를 서브호출하여 반환하는 식으로 구현하면 구현이 훨씬 간편해진다. 그리고 만약 그 재귀함수내에 특정 조건에 의해
가지를 칠 것이 많다면 백트래킹으로 속도가 훨씬 빨라진다.
BOJ에서 부분문제를 세분화 하는 문제로는 '도로 건설', '트리 나라' 가 있고, 세분화하지 않고 또 다른 재귀 함수를 정의하여 백트래킹으로 푸는 문제는
'블럭 쌓기' 가 있다.

그리고 블럭 쌓기에서 주어진 높이의 블록들만이 아니라 주어진 높이 이하의 가능한 모든 답을 요구하는데 이건 따로 각각의 높이에 대해 더해줄 필요가없다.
처음에 이것을 몰라서 매우 헤맸는데, 조금만 더 생각해보면 2층에서 빈칸으로 3층을 더 쌓으면 5층이기 때문에 결국 2층도 5층인것이다. 즉 실제로는 
2층까지만 쌓고 이후에는 빈칸으로만 쌓아올려도 결국 기저(꼭대기 높이)까지 올라가기때문에 2층도 5층으로 함께 계산해주게 되는것이다.
결국 안쌓는것, 즉 빈 블록 혹은 투명 블록을 쌓는 것도 블록을 쌓는 것이기 때문에 따로 주어진 층보다 낮은 답을 계산해 줄 필요가없는것이다.
오히려 이 문제에서 맨 마지막 층까지 쌓인 블록의 가짓수 만을 묻는다면 기저에 도달했을때(h(현재높이)==H(주어진높이) 일때) prvState(아래층에 블록놓인현황)
이 0이 아닌지를 판단하여 0이아니라면 return 1; 0이라면 return 0; 을 하면 될것이다. 왜냐하면 바로 아래층에 블록이 하나라도 있다는것은 그 아래층도
완전히 비어있지 않다는 뜻이고(그 블록을 받쳐야 하니까) 그 아래층도 마찬가지이고... 쭉쭉쭉쭉 내려가다보면 결국 사이에 빈 줄이 없이
꼭대기까지 올라왔다는거니까 주어진 높이의 블록인 경우라는 말이 되기때문이다.